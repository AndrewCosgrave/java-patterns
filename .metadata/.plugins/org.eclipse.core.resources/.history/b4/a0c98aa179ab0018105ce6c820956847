package decorator;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

/*
 * Hierarachail pattern that builds 
 * function at each level while using compisiotion from similiar datatyoes 
 * 
 * 
 * Wrap another object to add functionalty to it.
 * Enables adding of functionality without affectiong otherparts of the hierarachy.
 * 
 * Single Responsibilty principle 
 * 
 * Compose behaviour dynamically by using one of the subclasses that decorate your object
 * adding behaviuor trough creation
 * 
 * good examples are java.io.InputStream
 * java.util.Collections#checkedList
 * UI compents swing/awt 


 * Inheritance based but uses composition and inheritance (is-a , has-a) 
 * 
 * Alternative to subclassing 
 * Constructor requires instance from hierarchy
 * 
 * 
 * 
 */
public class Control {

	public static void main(String[] args) {
		
	}
	
	private void simpleDecoratorExample() throws FileNotFoundException {
		File file = new File("./output.txt");
		try {
			file.createNewFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		OutputStream oStream = new FileOutputStream(file); 
		DataOutputStream doStream = new DataOutputStream(oStream);
		doStream.writeChars("text"); 
		
		doStream.close();
		oStream.close(); 
	}

}
